---
import Input from '@ui/Input.astro';
import Button from '@ui/Button.astro';
import Card from '@ui/Card.astro';
import Heading from '@ui/Heading.astro';
import Text from '@ui/Text.astro';
---

<Card class="w-full max-w-md mx-auto">
  <form id="reset-form" autocomplete="on" novalidate>
    <Heading tag="h1" fontSize="h2" fontWeight="700" align="center">Réinitialiser le mot de passe</Heading>
    <Text as="p" align="center" class="mb-4">Choisissez un nouveau mot de passe.</Text>
    <Input id="password" name="password" type="password" label="Nouveau mot de passe" required autofocus class="mb-4" />
    <div id="reset-alert" class="mb-4" style="display:none"></div>
    <Button id="reset-submit" type="submit" variant="primary" size="lg" class="w-full">Valider</Button>
    <div class="mt-4 text-center">
      <a href="/auth/connexion" class="text-sm text-primary hover:underline">Retour à la connexion</a>
    </div>
  </form>
</Card>

<script type="module">
import { authClient } from '../../lib/auth-client';

export function handleResetPasswordForm() {
  function getTokenFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get('token');
  }

  const form = document.getElementById('reset-form');
  const password = document.getElementById('password');
  const alertDiv = document.getElementById('reset-alert');
  const submitBtn = document.getElementById('reset-submit');
  const loader = document.getElementById('reset-loader');
  const btnText = document.getElementById('reset-btn-text');

  if (!form || !password || !alertDiv || !submitBtn || !loader || !btnText) return;

  const resetButtonState = () => {
    submitBtn.disabled = false;
    btnText.style.display = '';
    loader.style.display = 'none';
  };

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    alertDiv.classList.add('hidden');
    alertDiv.textContent = '';
    submitBtn.disabled = true;
    btnText.style.display = 'none';
    loader.style.display = 'inline-block';

    const token = getTokenFromUrl();
    if (!token) {
      alertDiv.textContent = 'Lien invalide ou expiré.';
      alertDiv.setAttribute('variant', 'error');
      alertDiv.classList.remove('hidden');
      resetButtonState();
      return;
    }
    if (!password.value || password.value.length < 8) {
      alertDiv.textContent = 'Le mot de passe doit contenir au moins 8 caractères.';
      alertDiv.setAttribute('variant', 'error');
      alertDiv.classList.remove('hidden');
      password.focus();
      resetButtonState();
      return;
    }
    try {
      const { error } = await authClient.resetPassword({
        newPassword: password.value,
        token
      });
      if (error) {
        alertDiv.textContent = error.message || 'Erreur lors de la réinitialisation.';
        alertDiv.setAttribute('variant', 'error');
        alertDiv.classList.remove('hidden');
        resetButtonState();
        return;
      }
      alertDiv.textContent = 'Mot de passe mis à jour avec succès. Vous pouvez vous connecter.';
      alertDiv.setAttribute('variant', 'success');
      alertDiv.classList.remove('hidden');
      setTimeout(() => {
        window.location.href = '/connexion';
      }, 2000);
    } catch (err) {
      alertDiv.textContent = 'Erreur inattendue.';
      alertDiv.setAttribute('variant', 'error');
      alertDiv.classList.remove('hidden');
      resetButtonState();
    }
  });
}

document.addEventListener('DOMContentLoaded', handleResetPasswordForm);
</script>
